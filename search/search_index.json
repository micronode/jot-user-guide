{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction JOT is a persistence management framework for scheduling and calendar data, that incorporates not just backend persistence but also presentation layer and API components. In some ways JOT may be seen as a rapid prototyping tool, but it may also be used to build highly resilient, well performing production systems and components. The iCalendar Specification JOT is based on a collection of published specifications known as iCalendar, that define interoperability standards adopted by a broad range of productivity software. In using these specifications as the basis for data modeling and API design, JOT is aiming for a level of interoperability rarely achieved in productivity and scheduling software. JOT API The anchoring component of the JOT framework is the Application Programming Interface ( API ). Whilst this may appear to be an odd choice for an achor, having the data model downstream and presentation layer upstream, the primary reason is that the API can be language-agnostic, and thus support multiple implementations of presentation and data modeling components.","title":"Introduction"},{"location":"#introduction","text":"JOT is a persistence management framework for scheduling and calendar data, that incorporates not just backend persistence but also presentation layer and API components. In some ways JOT may be seen as a rapid prototyping tool, but it may also be used to build highly resilient, well performing production systems and components.","title":"Introduction"},{"location":"#the-icalendar-specification","text":"JOT is based on a collection of published specifications known as iCalendar, that define interoperability standards adopted by a broad range of productivity software. In using these specifications as the basis for data modeling and API design, JOT is aiming for a level of interoperability rarely achieved in productivity and scheduling software.","title":"The iCalendar Specification"},{"location":"#jot-api","text":"The anchoring component of the JOT framework is the Application Programming Interface ( API ). Whilst this may appear to be an odd choice for an achor, having the data model downstream and presentation layer upstream, the primary reason is that the API can be language-agnostic, and thus support multiple implementations of presentation and data modeling components.","title":"JOT API"},{"location":"jot4j/","text":"Jot4j Jot4j is a Java-based implementation of the JOT persistence layer. It aims to support multiple persistence backing services and provide a common interface for implementing the JOT API . Overview Jot4j includes a number of sub-projects that provide concrete implementations of persistence for various backing services. Initially support is provided for DynamoDB, but more will be added over time. Jot4j-dynamodb The DynamoDB implementation makes use of the Single-table Design pattern, whereby multiple entities and relationships are modeled in a single DynamoDB table. This provides benefits in both performance and simplicity, allowing for greater decoupling of data models and better support for microservices architectures. Jot4j Mapper Jot4j uses DynamoDB mapper annotations to define the entities managed in the single-table model. The following mapper objects are supported: Calendar Event Journal ToDo Availability Available Alarm Attachment Group Card CardOrg Global Search Indexes (GSI) Jot4j uses three (3) Global Search Indexes to support data retrieval. These GSIs include: GSI1 - Indexed by entity type (e.g. CALENDAR , VEVENT , VALARM , etc.) GSI2 - Indexed by group and/or calendar GSI3 - Indexed by calendar component Jot4j Commands Jot4j used the Command pattern to support operations on DynamoDB tables. Commands generally fit into two categories: a Mapper command uses Mapper objects to update data (e.g. Create and Update commands), whilst Table commands are used to directly manipulate a DynamoDB table (e.g. Delete commands). Commands may also support batch operations whereby multiple entities may be updated in a single call, resulting in improved performance. Filter Queries Jot4j supports querying via iCal4j filter expressions, which provide a query language for filtering iCalendar objects.","title":"Jot4j"},{"location":"jot4j/#jot4j","text":"Jot4j is a Java-based implementation of the JOT persistence layer. It aims to support multiple persistence backing services and provide a common interface for implementing the JOT API .","title":"Jot4j"},{"location":"jot4j/#overview","text":"Jot4j includes a number of sub-projects that provide concrete implementations of persistence for various backing services. Initially support is provided for DynamoDB, but more will be added over time.","title":"Overview"},{"location":"jot4j/#jot4j-dynamodb","text":"The DynamoDB implementation makes use of the Single-table Design pattern, whereby multiple entities and relationships are modeled in a single DynamoDB table. This provides benefits in both performance and simplicity, allowing for greater decoupling of data models and better support for microservices architectures.","title":"Jot4j-dynamodb"},{"location":"jot4j/#jot4j-mapper","text":"Jot4j uses DynamoDB mapper annotations to define the entities managed in the single-table model. The following mapper objects are supported: Calendar Event Journal ToDo Availability Available Alarm Attachment Group Card CardOrg","title":"Jot4j Mapper"},{"location":"jot4j/#global-search-indexes-gsi","text":"Jot4j uses three (3) Global Search Indexes to support data retrieval. These GSIs include: GSI1 - Indexed by entity type (e.g. CALENDAR , VEVENT , VALARM , etc.) GSI2 - Indexed by group and/or calendar GSI3 - Indexed by calendar component","title":"Global Search Indexes (GSI)"},{"location":"jot4j/#jot4j-commands","text":"Jot4j used the Command pattern to support operations on DynamoDB tables. Commands generally fit into two categories: a Mapper command uses Mapper objects to update data (e.g. Create and Update commands), whilst Table commands are used to directly manipulate a DynamoDB table (e.g. Delete commands). Commands may also support batch operations whereby multiple entities may be updated in a single call, resulting in improved performance.","title":"Jot4j Commands"},{"location":"jot4j/#filter-queries","text":"Jot4j supports querying via iCal4j filter expressions, which provide a query language for filtering iCalendar objects.","title":"Filter Queries"},{"location":"jotapi/","text":"JOT API The JOT API provides the anchoring specification of the JOT framework. Overview The JOT API actually consists of two independent APIs: one for calendar data, and another for entity data. The calendar API is based on the published iCalendar specification, and supports events, tasks, availability and journaling. The enity API is based on the vCard specification, and supports individuals, organizations, resources and groups. JOT Calendar API (jotcal) The jotcal API supports endpoints for the following resource types: Calendar - a collection of calendar components (i.e. events, journals, todos, availability) Event - a calendar component that defines a scheduled, optionally recurring event Journal - a calendar component used to record observations and notes ToDo - a calendar component for tasks and workflow items Alarm - a sub-component of other components to define actions triggered by component properties/state Availability - a component that defines the availability of individuals and resources Attachment - a binary endpoint for uploading/accessing component attachments FreeBusy - a non-persistent component that is constructed from the blocked time of other components JOT Entity API (jotcard) The jotcard API supports endpoints for the following resource types: Group - an entity that defines a collection of individuals and resources Card - an entity that defines an individual or resource","title":"JOT API"},{"location":"jotapi/#jot-api","text":"The JOT API provides the anchoring specification of the JOT framework.","title":"JOT API"},{"location":"jotapi/#overview","text":"The JOT API actually consists of two independent APIs: one for calendar data, and another for entity data. The calendar API is based on the published iCalendar specification, and supports events, tasks, availability and journaling. The enity API is based on the vCard specification, and supports individuals, organizations, resources and groups.","title":"Overview"},{"location":"jotapi/#jot-calendar-api-jotcal","text":"The jotcal API supports endpoints for the following resource types: Calendar - a collection of calendar components (i.e. events, journals, todos, availability) Event - a calendar component that defines a scheduled, optionally recurring event Journal - a calendar component used to record observations and notes ToDo - a calendar component for tasks and workflow items Alarm - a sub-component of other components to define actions triggered by component properties/state Availability - a component that defines the availability of individuals and resources Attachment - a binary endpoint for uploading/accessing component attachments FreeBusy - a non-persistent component that is constructed from the blocked time of other components","title":"JOT Calendar API (jotcal)"},{"location":"jotapi/#jot-entity-api-jotcard","text":"The jotcard API supports endpoints for the following resource types: Group - an entity that defines a collection of individuals and resources Card - an entity that defines an individual or resource","title":"JOT Entity API (jotcard)"},{"location":"jwc/","text":"Jot Web Components Jot Web Components (JWC) provides a collection of Web Components that can be combined in various ways to implement a complete JOT-based Web user interface. JWC supports data management (i.e. retrieval and persistence) via the JOT API . Overview Jot Web Components are named according to the supported JOT API endpoints, such that a typical naming convention is as follows: jot-<endpoint>-<component_type> So for example, a calendar list web component would be called: jot-calendar-list Common Elements As the implementation of components for different endpoints will share much of the same code, a set of common superclass components are provided. These aim to reduce code duplication and improve consistency across all components. The common elements are: jot-element - base class for all Jot Web Components jot-list-element - functionality to support list rendering jot-geo-element - functionality to support geolocation rendering jot-grid-element - support for rendering information grids jot-editor-element - base class for editor components","title":"Jot Web Components"},{"location":"jwc/#jot-web-components","text":"Jot Web Components (JWC) provides a collection of Web Components that can be combined in various ways to implement a complete JOT-based Web user interface. JWC supports data management (i.e. retrieval and persistence) via the JOT API .","title":"Jot Web Components"},{"location":"jwc/#overview","text":"Jot Web Components are named according to the supported JOT API endpoints, such that a typical naming convention is as follows: jot-<endpoint>-<component_type> So for example, a calendar list web component would be called: jot-calendar-list","title":"Overview"},{"location":"jwc/#common-elements","text":"As the implementation of components for different endpoints will share much of the same code, a set of common superclass components are provided. These aim to reduce code duplication and improve consistency across all components. The common elements are: jot-element - base class for all Jot Web Components jot-list-element - functionality to support list rendering jot-geo-element - functionality to support geolocation rendering jot-grid-element - support for rendering information grids jot-editor-element - base class for editor components","title":"Common Elements"},{"location":"resources/calendar/","text":"JOT Calendar This page outlines the modeling of calendar objects and how they are accessed with the JOT API. Overview A calendar is used to group related components and define additional attributes and behaviours of such a group. For example, a calendar may define a roster for a team, or a task list for a project, or maybe a schedule of events for an automated system. Calendar API Whilst a JOT Calendar follows the iCalendar specification for Calendar properties, it does not follow the same nesting of components within a Calendar resource. Rather, the calendar and it's components are defined as different resource types accessible via different endpoints. So for a JOT calendar, the JSON structure is defined as follows: { \"uid\":\"1\", \"name\":\"JustIn\", \"description\":\"\", \"source\":\"https://www.abc.net.au/news/feed/51120/rss.xml\", \"url\":\"https://www.abc.net.au/news/justin/\", \"image\":\"https://www.abc.net.au/news/image/8413416-1x1-144x144.png\", \"last-modified\":\"20210304T055223Z\" } The available endpoints for calendar management are defined in the following table. Endpoint Action Description REST Verb /calendars list-calendars Returns a filtered list of existing calendar objects GET /calendars create-calendar Create and return a new calendar object POST /calendar{Uid} get-calendar Returns a single existing calendar object GET /calendar{Uid} set-calendar Replace an existing calendar object PUT /calendar{Uid} update-calendar Update an existing calendar object PATCH /calendar{Uid} delete-calendar Delete an existing calendar object DELETE Calendar Persistence The Calendar UID property is a feature of the primary key for persistence, however it may also incorporate other elements to support multi-tenancy, etc. For example, with DynamoDB a calendar record is as follows: PK SK UID TYPE DATA Owner Group GROUP #CALENDAR# UID GROUP #CALENDAR# UID UID CALENDAR {} To support multiple access patterns the following Global Search Indexes (GSI) are defined. GSI PK SK Description GSI1 CALENDAR GROUP #CALENDAR# UID Retrieve a list of calendars GSI2 GROUP #CALENDAR# UID GROUP #CALENDAR# UID Retrieve a calendar and it's components Calendar Web Components TBD.","title":"Calendar"},{"location":"resources/calendar/#jot-calendar","text":"This page outlines the modeling of calendar objects and how they are accessed with the JOT API.","title":"JOT Calendar"},{"location":"resources/calendar/#overview","text":"A calendar is used to group related components and define additional attributes and behaviours of such a group. For example, a calendar may define a roster for a team, or a task list for a project, or maybe a schedule of events for an automated system.","title":"Overview"},{"location":"resources/calendar/#calendar-api","text":"Whilst a JOT Calendar follows the iCalendar specification for Calendar properties, it does not follow the same nesting of components within a Calendar resource. Rather, the calendar and it's components are defined as different resource types accessible via different endpoints. So for a JOT calendar, the JSON structure is defined as follows: { \"uid\":\"1\", \"name\":\"JustIn\", \"description\":\"\", \"source\":\"https://www.abc.net.au/news/feed/51120/rss.xml\", \"url\":\"https://www.abc.net.au/news/justin/\", \"image\":\"https://www.abc.net.au/news/image/8413416-1x1-144x144.png\", \"last-modified\":\"20210304T055223Z\" } The available endpoints for calendar management are defined in the following table. Endpoint Action Description REST Verb /calendars list-calendars Returns a filtered list of existing calendar objects GET /calendars create-calendar Create and return a new calendar object POST /calendar{Uid} get-calendar Returns a single existing calendar object GET /calendar{Uid} set-calendar Replace an existing calendar object PUT /calendar{Uid} update-calendar Update an existing calendar object PATCH /calendar{Uid} delete-calendar Delete an existing calendar object DELETE","title":"Calendar API"},{"location":"resources/calendar/#calendar-persistence","text":"The Calendar UID property is a feature of the primary key for persistence, however it may also incorporate other elements to support multi-tenancy, etc. For example, with DynamoDB a calendar record is as follows: PK SK UID TYPE DATA Owner Group GROUP #CALENDAR# UID GROUP #CALENDAR# UID UID CALENDAR {} To support multiple access patterns the following Global Search Indexes (GSI) are defined. GSI PK SK Description GSI1 CALENDAR GROUP #CALENDAR# UID Retrieve a list of calendars GSI2 GROUP #CALENDAR# UID GROUP #CALENDAR# UID Retrieve a calendar and it's components","title":"Calendar Persistence"},{"location":"resources/calendar/#calendar-web-components","text":"TBD.","title":"Calendar Web Components"}]}